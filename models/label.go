// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Label label
//
// swagger:model Label
type Label struct {

	// cluster num
	ClusterNum *int32 `json:"cluster_num,omitempty"`

	// clusters
	Clusters []*NestedCluster `json:"clusters,omitempty"`

	// content library image num
	ContentLibraryImageNum *int32 `json:"content_library_image_num,omitempty"`

	// content library images
	ContentLibraryImages []*NestedContentLibraryImage `json:"content_library_images,omitempty"`

	// content library vm template num
	ContentLibraryVMTemplateNum *int32 `json:"content_library_vm_template_num,omitempty"`

	// content library vm templates
	ContentLibraryVMTemplates []*NestedContentLibraryVMTemplate `json:"content_library_vm_templates,omitempty"`

	// created at
	// Required: true
	CreatedAt *string `json:"createdAt"`

	// datacenter num
	DatacenterNum *int32 `json:"datacenter_num,omitempty"`

	// datacenters
	Datacenters []*NestedDatacenter `json:"datacenters,omitempty"`

	// disk num
	DiskNum *int32 `json:"disk_num,omitempty"`

	// elf image num
	ElfImageNum *int32 `json:"elf_image_num,omitempty"`

	// elf images
	ElfImages []*NestedElfImage `json:"elf_images,omitempty"`

	// gpu device num
	GpuDeviceNum *int32 `json:"gpu_device_num,omitempty"`

	// gpu devices
	GpuDevices []*NestedGpuDevice `json:"gpu_devices,omitempty"`

	// host num
	HostNum *int32 `json:"host_num,omitempty"`

	// hosts
	Hosts []*NestedHost `json:"hosts,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// iscsi lun num
	IscsiLunNum *int32 `json:"iscsi_lun_num,omitempty"`

	// iscsi lun snapshot num
	IscsiLunSnapshotNum *int32 `json:"iscsi_lun_snapshot_num,omitempty"`

	// iscsi luns
	IscsiLuns []*NestedIscsiLun `json:"iscsi_luns,omitempty"`

	// iscsi target num
	IscsiTargetNum *int32 `json:"iscsi_target_num,omitempty"`

	// iscsi targets
	IscsiTargets []*NestedIscsiTarget `json:"iscsi_targets,omitempty"`

	// key
	// Required: true
	Key *string `json:"key"`

	// nic num
	NicNum *int32 `json:"nic_num,omitempty"`

	// nics
	Nics []*NestedNic `json:"nics,omitempty"`

	// system vlan num
	SystemVlanNum *int32 `json:"system_vlan_num,omitempty"`

	// total num
	TotalNum *int32 `json:"total_num,omitempty"`

	// value
	Value *string `json:"value,omitempty"`

	// vds num
	VdsNum *int32 `json:"vds_num,omitempty"`

	// vdses
	Vdses []*NestedVds `json:"vdses,omitempty"`

	// vlans
	Vlans []*NestedVlan `json:"vlans,omitempty"`

	// vm num
	VMNum *int32 `json:"vm_num,omitempty"`

	// vm snapshot num
	VMSnapshotNum *int32 `json:"vm_snapshot_num,omitempty"`

	// vm snapshots
	VMSnapshots []*NestedVMSnapshot `json:"vm_snapshots,omitempty"`

	// vm template num
	VMTemplateNum *int32 `json:"vm_template_num,omitempty"`

	// vm templates
	VMTemplates []*NestedVMTemplate `json:"vm_templates,omitempty"`

	// vm vlan num
	VMVlanNum *int32 `json:"vm_vlan_num,omitempty"`

	// vm volume num
	VMVolumeNum *int32 `json:"vm_volume_num,omitempty"`

	// vm volume snapshot num
	VMVolumeSnapshotNum *int32 `json:"vm_volume_snapshot_num,omitempty"`

	// vm volume snapshots
	VMVolumeSnapshots []*NestedVMVolumeSnapshot `json:"vm_volume_snapshots,omitempty"`

	// vm volumes
	VMVolumes []*NestedVMVolume `json:"vm_volumes,omitempty"`

	// vms
	Vms []*NestedVM `json:"vms,omitempty"`
}

// Validate validates this label
func (m *Label) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContentLibraryImages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContentLibraryVMTemplates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatacenters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateElfImages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGpuDevices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHosts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIscsiLuns(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIscsiTargets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVdses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVlans(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMSnapshots(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMTemplates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMVolumeSnapshots(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMVolumes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVms(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Label) validateClusters(formats strfmt.Registry) error {
	if swag.IsZero(m.Clusters) { // not required
		return nil
	}

	for i := 0; i < len(m.Clusters); i++ {
		if swag.IsZero(m.Clusters[i]) { // not required
			continue
		}

		if m.Clusters[i] != nil {
			if err := m.Clusters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateContentLibraryImages(formats strfmt.Registry) error {
	if swag.IsZero(m.ContentLibraryImages) { // not required
		return nil
	}

	for i := 0; i < len(m.ContentLibraryImages); i++ {
		if swag.IsZero(m.ContentLibraryImages[i]) { // not required
			continue
		}

		if m.ContentLibraryImages[i] != nil {
			if err := m.ContentLibraryImages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("content_library_images" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("content_library_images" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateContentLibraryVMTemplates(formats strfmt.Registry) error {
	if swag.IsZero(m.ContentLibraryVMTemplates) { // not required
		return nil
	}

	for i := 0; i < len(m.ContentLibraryVMTemplates); i++ {
		if swag.IsZero(m.ContentLibraryVMTemplates[i]) { // not required
			continue
		}

		if m.ContentLibraryVMTemplates[i] != nil {
			if err := m.ContentLibraryVMTemplates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("content_library_vm_templates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("content_library_vm_templates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("createdAt", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *Label) validateDatacenters(formats strfmt.Registry) error {
	if swag.IsZero(m.Datacenters) { // not required
		return nil
	}

	for i := 0; i < len(m.Datacenters); i++ {
		if swag.IsZero(m.Datacenters[i]) { // not required
			continue
		}

		if m.Datacenters[i] != nil {
			if err := m.Datacenters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("datacenters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("datacenters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateElfImages(formats strfmt.Registry) error {
	if swag.IsZero(m.ElfImages) { // not required
		return nil
	}

	for i := 0; i < len(m.ElfImages); i++ {
		if swag.IsZero(m.ElfImages[i]) { // not required
			continue
		}

		if m.ElfImages[i] != nil {
			if err := m.ElfImages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("elf_images" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("elf_images" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateGpuDevices(formats strfmt.Registry) error {
	if swag.IsZero(m.GpuDevices) { // not required
		return nil
	}

	for i := 0; i < len(m.GpuDevices); i++ {
		if swag.IsZero(m.GpuDevices[i]) { // not required
			continue
		}

		if m.GpuDevices[i] != nil {
			if err := m.GpuDevices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("gpu_devices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("gpu_devices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateHosts(formats strfmt.Registry) error {
	if swag.IsZero(m.Hosts) { // not required
		return nil
	}

	for i := 0; i < len(m.Hosts); i++ {
		if swag.IsZero(m.Hosts[i]) { // not required
			continue
		}

		if m.Hosts[i] != nil {
			if err := m.Hosts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hosts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hosts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Label) validateIscsiLuns(formats strfmt.Registry) error {
	if swag.IsZero(m.IscsiLuns) { // not required
		return nil
	}

	for i := 0; i < len(m.IscsiLuns); i++ {
		if swag.IsZero(m.IscsiLuns[i]) { // not required
			continue
		}

		if m.IscsiLuns[i] != nil {
			if err := m.IscsiLuns[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("iscsi_luns" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("iscsi_luns" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateIscsiTargets(formats strfmt.Registry) error {
	if swag.IsZero(m.IscsiTargets) { // not required
		return nil
	}

	for i := 0; i < len(m.IscsiTargets); i++ {
		if swag.IsZero(m.IscsiTargets[i]) { // not required
			continue
		}

		if m.IscsiTargets[i] != nil {
			if err := m.IscsiTargets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("iscsi_targets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("iscsi_targets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateKey(formats strfmt.Registry) error {

	if err := validate.Required("key", "body", m.Key); err != nil {
		return err
	}

	return nil
}

func (m *Label) validateNics(formats strfmt.Registry) error {
	if swag.IsZero(m.Nics) { // not required
		return nil
	}

	for i := 0; i < len(m.Nics); i++ {
		if swag.IsZero(m.Nics[i]) { // not required
			continue
		}

		if m.Nics[i] != nil {
			if err := m.Nics[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nics" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateVdses(formats strfmt.Registry) error {
	if swag.IsZero(m.Vdses) { // not required
		return nil
	}

	for i := 0; i < len(m.Vdses); i++ {
		if swag.IsZero(m.Vdses[i]) { // not required
			continue
		}

		if m.Vdses[i] != nil {
			if err := m.Vdses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vdses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vdses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateVlans(formats strfmt.Registry) error {
	if swag.IsZero(m.Vlans) { // not required
		return nil
	}

	for i := 0; i < len(m.Vlans); i++ {
		if swag.IsZero(m.Vlans[i]) { // not required
			continue
		}

		if m.Vlans[i] != nil {
			if err := m.Vlans[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vlans" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vlans" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateVMSnapshots(formats strfmt.Registry) error {
	if swag.IsZero(m.VMSnapshots) { // not required
		return nil
	}

	for i := 0; i < len(m.VMSnapshots); i++ {
		if swag.IsZero(m.VMSnapshots[i]) { // not required
			continue
		}

		if m.VMSnapshots[i] != nil {
			if err := m.VMSnapshots[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vm_snapshots" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vm_snapshots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateVMTemplates(formats strfmt.Registry) error {
	if swag.IsZero(m.VMTemplates) { // not required
		return nil
	}

	for i := 0; i < len(m.VMTemplates); i++ {
		if swag.IsZero(m.VMTemplates[i]) { // not required
			continue
		}

		if m.VMTemplates[i] != nil {
			if err := m.VMTemplates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vm_templates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vm_templates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateVMVolumeSnapshots(formats strfmt.Registry) error {
	if swag.IsZero(m.VMVolumeSnapshots) { // not required
		return nil
	}

	for i := 0; i < len(m.VMVolumeSnapshots); i++ {
		if swag.IsZero(m.VMVolumeSnapshots[i]) { // not required
			continue
		}

		if m.VMVolumeSnapshots[i] != nil {
			if err := m.VMVolumeSnapshots[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vm_volume_snapshots" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vm_volume_snapshots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateVMVolumes(formats strfmt.Registry) error {
	if swag.IsZero(m.VMVolumes) { // not required
		return nil
	}

	for i := 0; i < len(m.VMVolumes); i++ {
		if swag.IsZero(m.VMVolumes[i]) { // not required
			continue
		}

		if m.VMVolumes[i] != nil {
			if err := m.VMVolumes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vm_volumes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vm_volumes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateVms(formats strfmt.Registry) error {
	if swag.IsZero(m.Vms) { // not required
		return nil
	}

	for i := 0; i < len(m.Vms); i++ {
		if swag.IsZero(m.Vms[i]) { // not required
			continue
		}

		if m.Vms[i] != nil {
			if err := m.Vms[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vms" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this label based on the context it is used
func (m *Label) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClusters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContentLibraryImages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContentLibraryVMTemplates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDatacenters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateElfImages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGpuDevices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHosts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIscsiLuns(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIscsiTargets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNics(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVdses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVlans(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMSnapshots(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMTemplates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMVolumeSnapshots(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMVolumes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVms(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Label) contextValidateClusters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Clusters); i++ {

		if m.Clusters[i] != nil {
			if err := m.Clusters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateContentLibraryImages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ContentLibraryImages); i++ {

		if m.ContentLibraryImages[i] != nil {
			if err := m.ContentLibraryImages[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("content_library_images" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("content_library_images" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateContentLibraryVMTemplates(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ContentLibraryVMTemplates); i++ {

		if m.ContentLibraryVMTemplates[i] != nil {
			if err := m.ContentLibraryVMTemplates[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("content_library_vm_templates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("content_library_vm_templates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateDatacenters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Datacenters); i++ {

		if m.Datacenters[i] != nil {
			if err := m.Datacenters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("datacenters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("datacenters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateElfImages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ElfImages); i++ {

		if m.ElfImages[i] != nil {
			if err := m.ElfImages[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("elf_images" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("elf_images" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateGpuDevices(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.GpuDevices); i++ {

		if m.GpuDevices[i] != nil {
			if err := m.GpuDevices[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("gpu_devices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("gpu_devices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateHosts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Hosts); i++ {

		if m.Hosts[i] != nil {
			if err := m.Hosts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hosts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hosts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateIscsiLuns(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IscsiLuns); i++ {

		if m.IscsiLuns[i] != nil {
			if err := m.IscsiLuns[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("iscsi_luns" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("iscsi_luns" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateIscsiTargets(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IscsiTargets); i++ {

		if m.IscsiTargets[i] != nil {
			if err := m.IscsiTargets[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("iscsi_targets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("iscsi_targets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateNics(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Nics); i++ {

		if m.Nics[i] != nil {
			if err := m.Nics[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nics" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateVdses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Vdses); i++ {

		if m.Vdses[i] != nil {
			if err := m.Vdses[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vdses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vdses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateVlans(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Vlans); i++ {

		if m.Vlans[i] != nil {
			if err := m.Vlans[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vlans" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vlans" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateVMSnapshots(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VMSnapshots); i++ {

		if m.VMSnapshots[i] != nil {
			if err := m.VMSnapshots[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vm_snapshots" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vm_snapshots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateVMTemplates(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VMTemplates); i++ {

		if m.VMTemplates[i] != nil {
			if err := m.VMTemplates[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vm_templates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vm_templates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateVMVolumeSnapshots(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VMVolumeSnapshots); i++ {

		if m.VMVolumeSnapshots[i] != nil {
			if err := m.VMVolumeSnapshots[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vm_volume_snapshots" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vm_volume_snapshots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateVMVolumes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VMVolumes); i++ {

		if m.VMVolumes[i] != nil {
			if err := m.VMVolumes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vm_volumes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vm_volumes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateVms(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Vms); i++ {

		if m.Vms[i] != nil {
			if err := m.Vms[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vms" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Label) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Label) UnmarshalBinary(b []byte) error {
	var res Label
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
